
/*
 *  digitalList 数据
 */

const digitalListData = {
    title: "RAP数据模拟",
    contents: [
        {
            subTitle: "为什么需要数据模拟？",
            subContent: "数据模拟，在前后端分离的WEB开发模式中，通常需定义接口文档来规范其接口形式，如接口地址、参数、类型、含义等。这里我们推荐适用RAP。RAP是一个可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性， 围绕接口定义，通过一系列自动化工具提升我们的协作效率。"
        },
        {
            subTitle: "RAP的主要目标用户群  ",
            subContent: "（1）前端，使用RAP制定接口，生成自测数据（2）后端，使用RAP制定接口，校验真实输出的格式（3）测试，使用RAP录制Mock规则，实现自动化测试（4）其它，各种角色，需要了解该系统接口情况的人"
        },
        {
            subTitle: "RAP解决的问题  ",
            subContent: "（1）接口编辑的便利性,RAP所解决的问题，主要集中于中大型的企业级项目，接口形式有一定的复杂度。比如一个报表的请求，可能嵌套较多的层级。传统的方式描述较多嵌套的层级结构会较为麻烦，复制、移动等修改都消耗大量时间，而RAP通过GUI工具和结构分析可以很好的解决这些问题。再复杂的嵌套参数，一键复制和移动。展开、折叠毫不费力。RAP专为接口编辑而设计，在用户体验和细节上做了大量处理，保证高效、方便的接口文档编辑。（2）手写模拟数据耗费时间，从设计阶段之后到联调之前，前端需要编写大量的自测数据来自测（尤其层级嵌套或CASE较多的情况会比较麻烦），有了RAP告别手写自测数据，RAP会根据最新的接口文档动态实时的产生模拟数据，且结合MockJS支持深度定制的数据模拟规则。“一处写好，大家共享。”，不管是自测、做DEMO，RAP在数据模拟上都可用最少时间，达到最大产出。对于前端，RAP模拟请求返回生成靠谱的自测数据，对于后端，RAP根据接口文档中定义的参数格式伪造实际请求以此测试后端实际接口的准确性。（3）有规范却不执行，这是实际常见到的问题，定义好了接口，联调的时候发现实际数据不符合规则或前端手写的自测数据错误导致前端未正确处理，RAP MOCK保证前端代码对接口正确的处理，同时，RAP会根据接口文档中的结构动态验证后端实际返回的正确性，在联调前扫清所有后端格式错误（4）文档维护 & 实时性，传统的接口文档若不进行持续的维护，将会逐渐失效，没有实时性的文档很快将会变成废品，RAP集中式的文档编辑，实时生效的前后端工具将RAP中的接口文档变成强依赖，RAP中的接口文档一旦修改，所有的自动化功能都将受其影响，反之也保证了RAP中的文档始终是最新的"
        }
    ],
    link: {
        text: "开始安装RAP",
        href: "#"
    }
    
}

export default digitalListData;